{"ast":null,"code":"/* eslint-disable */\nimport axios from 'axios';\nimport { API_BASE_URL } from '@/config';\nconst state = () => ({\n  productsData: null,\n  product: null,\n  productLoadingFailed: false,\n  open: false,\n  productError: {},\n  productErrorMessage: '',\n  colorRu: '',\n  categories: null,\n  colors: null,\n  materials: null,\n  seasons: null\n});\nconst getters = {\n  products(state) {\n    return state.productsData ? state.productsData.items.filter((product, index, items) => {\n      if (items.indexOf(product) === index) {\n        return {\n          ...product\n        };\n      }\n      return null;\n    }) : [];\n  },\n  countProducts(state) {\n    return state.productsData ? state.productsData.pagination.total : 0;\n  }\n};\nconst actions = {\n  loadProductsData(context, {\n    page,\n    limit,\n    minPrice,\n    maxPrice,\n    categoryId,\n    colorIds,\n    materialIds,\n    seasonIds\n  }) {\n    return axios.get(`${API_BASE_URL}/api/products`, {\n      params: {\n        page,\n        limit,\n        minPrice,\n        maxPrice,\n        categoryId,\n        colorIds,\n        materialIds,\n        seasonIds\n      }\n    }).then(response => {\n      context.commit('updateProductsData', response.data);\n    }).catch(error => {\n      context.commit('updateProductLoadingFailed', true);\n      context.commit('updateProductError', error.response.data.error);\n      if (error.response.status === 500) {\n        context.commit('updateProductErrorMessage', error.response.data.error.message);\n        console.log('Ошибка загрузки списка продуктов');\n      }\n      context.commit('updateOpen', true);\n    });\n  },\n  loadCategories(context) {\n    return axios.get(`${API_BASE_URL}/api/productCategories`).then(response => {\n      context.commit('updateCategories', response.data.items);\n    }).catch(error => {\n      if (error.response.status === 500) {\n        context.commit('updateProductErrorMessage', error.response.data.error.message);\n        console.log('Ошибка загрузки списка категорий');\n      }\n      context.commit('updateOpen', true);\n    });\n  },\n  loadColors(context) {\n    return axios.get(`${API_BASE_URL}/api/colors`).then(response => {\n      context.commit('updateColors', response.data.items);\n    }).catch(error => {\n      if (error.response.status === 500) {\n        context.commit('updateProductErrorMessage', error.response.data.error.message);\n        console.log('Ошибка загрузки списка цветов');\n      }\n      context.commit('updateOpen', true);\n    });\n  },\n  loadMaterials(context) {\n    return axios.get(`${API_BASE_URL}/api/materials`).then(response => {\n      context.commit('updateMaterials', response.data.items);\n    }).catch(error => {\n      if (error.response.status === 500) {\n        context.commit('updateProductErrorMessage', error.response.data.error.message);\n        console.log('Ошибка загрузки списка материалов');\n      }\n      context.commit('updateOpen', true);\n    });\n  },\n  loadSeasons(context) {\n    return axios.get(`${API_BASE_URL}/api/seasons`).then(response => {\n      context.commit('updateSeasons', response.data.items);\n    }).catch(error => {\n      if (error.response.status === 500) {\n        context.commit('updateProductErrorMessage', error.response.data.error.message);\n        console.log('Ошибка загрузки списка коллекий');\n      }\n      context.commit('updateOpen', true);\n    });\n  },\n  loadProduct(context, {\n    id\n  }) {\n    return axios.get(`${API_BASE_URL}/api/products/${id}`).then(response => {\n      context.commit('updateProduct', response.data);\n    }).catch(error => {\n      if (error.response.status === 404) throw error;\n    });\n  },\n  openModal(context) {\n    context.commit('updateOpen', true);\n  },\n  closeModal(context) {\n    context.commit('updateOpen', false);\n  }\n};\nconst mutations = {\n  updateProductsData(state, productsData) {\n    state.productsData = productsData;\n  },\n  updateCategories(state, categories) {\n    state.categories = categories;\n  },\n  updateColors(state, colors) {\n    state.colors = colors;\n  },\n  updateMaterials(state, materials) {\n    state.materials = materials;\n  },\n  updateSeasons(state, seasons) {\n    state.seasons = seasons;\n  },\n  updateProduct(state, product) {\n    state.product = product;\n  },\n  updateProductLoadingFailed(state, productLoadingFailed) {\n    state.productLoadingFailed = productLoadingFailed;\n  },\n  updateOpen(state, open) {\n    state.open = open;\n  },\n  updateProductError(state, productError) {\n    state.productError = productError;\n  },\n  updateProductErrorMessage(state, productErrorMessage) {\n    state.productErrorMessage = productErrorMessage;\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n};","map":{"version":3,"names":["axios","API_BASE_URL","state","productsData","product","productLoadingFailed","open","productError","productErrorMessage","colorRu","categories","colors","materials","seasons","getters","products","items","filter","index","indexOf","countProducts","pagination","total","actions","loadProductsData","context","page","limit","minPrice","maxPrice","categoryId","colorIds","materialIds","seasonIds","get","params","then","response","commit","data","catch","error","status","message","console","log","loadCategories","loadColors","loadMaterials","loadSeasons","loadProduct","id","openModal","closeModal","mutations","updateProductsData","updateCategories","updateColors","updateMaterials","updateSeasons","updateProduct","updateProductLoadingFailed","updateOpen","updateProductError","updateProductErrorMessage","namespaced"],"sources":["/Users/elenasoshina/Desktop/Skillbox_Moire_shop/Skillbox_Moire/src/store/modules/products.js"],"sourcesContent":["/* eslint-disable */\nimport axios from 'axios';\nimport { API_BASE_URL } from '@/config';\n\nconst state = () => ({\n  productsData: null,\n  product: null,\n\n  productLoadingFailed: false,\n  open: false,\n  productError: {},\n  productErrorMessage: '',\n\n  colorRu: '',\n\n  categories: null,\n  colors: null,\n  materials: null,\n  seasons: null,\n});\n\nconst getters = {\n  products(state) {\n    return state.productsData\n      ? state.productsData.items.filter((product, index, items) => {\n        if (items.indexOf(product) === index) {\n          return {\n            ...product,\n          };\n        }\n        return null;\n      })\n      : [];\n  },\n  countProducts(state) {\n    return state.productsData ? state.productsData.pagination.total : 0;\n  },\n};\n\nconst actions = {\n  loadProductsData(\n    context,\n    {\n      page, limit, minPrice, maxPrice, categoryId, colorIds, materialIds, seasonIds,\n    },\n  ) {\n    return axios\n      .get(`${API_BASE_URL}/api/products`, {\n        params: {\n          page,\n          limit,\n          minPrice,\n          maxPrice,\n          categoryId,\n          colorIds,\n          materialIds,\n          seasonIds,\n        },\n      })\n      .then((response) => {\n        context.commit('updateProductsData', response.data);\n      })\n      .catch((error) => {\n        context.commit('updateProductLoadingFailed', true);\n        context.commit('updateProductError', error.response.data.error);\n        if (error.response.status === 500) {\n          context.commit('updateProductErrorMessage', error.response.data.error.message);\n          console.log('Ошибка загрузки списка продуктов');\n        }\n        context.commit('updateOpen', true);\n      });\n  },\n  loadCategories(context) {\n    return axios.get(`${API_BASE_URL}/api/productCategories`)\n    .then((response) => {\n      context.commit('updateCategories', response.data.items);\n    })\n    .catch((error) => {\n      if (error.response.status === 500) {\n        context.commit('updateProductErrorMessage', error.response.data.error.message);\n        console.log('Ошибка загрузки списка категорий');\n      }\n      context.commit('updateOpen', true);\n    });\n  },\n  loadColors(context) {\n    return axios.get(`${API_BASE_URL}/api/colors`)\n    .then((response) => {\n      context.commit('updateColors', response.data.items);\n    })\n    .catch((error) => {\n      if (error.response.status === 500) {\n        context.commit('updateProductErrorMessage', error.response.data.error.message);\n        console.log('Ошибка загрузки списка цветов');\n      }\n      context.commit('updateOpen', true);\n    });\n  },\n  loadMaterials(context) {\n    return axios.get(`${API_BASE_URL}/api/materials`)\n    .then((response) => {\n      context.commit('updateMaterials', response.data.items);\n    })\n    .catch((error) => {\n      if (error.response.status === 500) {\n        context.commit('updateProductErrorMessage', error.response.data.error.message);\n        console.log('Ошибка загрузки списка материалов');\n      }\n      context.commit('updateOpen', true);\n    });\n  },\n  loadSeasons(context) {\n    return axios.get(`${API_BASE_URL}/api/seasons`)\n    .then((response) => {\n      context.commit('updateSeasons', response.data.items);\n    })\n    .catch((error) => {\n      if (error.response.status === 500) {\n        context.commit('updateProductErrorMessage', error.response.data.error.message);\n        console.log('Ошибка загрузки списка коллекий');\n      }\n      context.commit('updateOpen', true);\n    });\n  },\n  loadProduct(context, { id }) {\n    return axios\n      .get(`${API_BASE_URL}/api/products/${id}`)\n      .then((response) => {\n        context.commit('updateProduct', response.data);\n      })\n      .catch((error) => {\n        if (error.response.status === 404) throw error;\n      });\n  },\n  openModal(context) {\n    context.commit('updateOpen', true);\n  },\n  closeModal(context) {\n    context.commit('updateOpen', false);\n  },\n};\n\nconst mutations = {\n  updateProductsData(state, productsData) {\n    state.productsData = productsData;\n  },\n  updateCategories(state, categories) {\n    state.categories = categories;\n  },\n  updateColors(state, colors) {\n    state.colors = colors;\n  },\n  updateMaterials(state, materials) {\n    state.materials = materials;\n  },\n  updateSeasons(state, seasons) {\n    state.seasons = seasons;\n  },\n  updateProduct(state, product) {\n    state.product = product;\n  },\n  updateProductLoadingFailed(state, productLoadingFailed) {\n    state.productLoadingFailed = productLoadingFailed;\n  },\n  updateOpen(state, open) {\n    state.open = open;\n  },\n  updateProductError(state, productError) {\n    state.productError = productError;\n  },\n  updateProductErrorMessage(state, productErrorMessage) {\n    state.productErrorMessage = productErrorMessage;\n  },\n};\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}