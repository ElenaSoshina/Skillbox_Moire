{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/* eslint-disable */\nimport router from '@/router';\nimport axios from 'axios';\nimport { API_BASE_URL } from '@/config';\nconst state = () => ({\n  orderData: null,\n  orderInfo: null,\n  orderSendingFailed: false,\n  deliveryTypes: [],\n  paymentTypes: [],\n  open: false,\n  orderError: {},\n  orderErrorMessage: ''\n});\nconst getters = {};\nconst actions = {\n  loadOrderData(context, {\n    name,\n    address,\n    phone,\n    email,\n    deliveryTypeId,\n    paymentTypeId,\n    comment\n  }) {\n    context.commit('updateOrderSendingFailed', false);\n    context.commit('updateOpen', false);\n    return axios.post(`${API_BASE_URL}/api/orders`, {\n      name,\n      address,\n      phone,\n      email,\n      deliveryTypeId,\n      paymentTypeId,\n      comment\n    }, {\n      params: {\n        userAccessKey: localStorage.getItem('userAccessKey')\n      }\n    }).then(response => {\n      if (response.data) context.commit('updateOrderData', response.data);\n      this.commit('cart/resetCart', response.data);\n      router.push({\n        name: 'orderInfo',\n        params: {\n          id: response.data.id\n        }\n      });\n    }).catch(error => {\n      context.commit('updateOrderSendingFailed', true);\n      if (error.response.status === 500) {\n        context.commit('updateOrderError', error.response.data.error);\n        context.commit('updateOrderErrorMessage', error.response.data.error.message);\n      } else {\n        context.commit('updateOrderError', error.response.data.error.request);\n        context.commit('updateOrderErrorMessage', 'Проверьте правильность заполнения полей');\n      }\n      context.commit('updateOpen', true);\n    });\n  },\n  loadOrderInfo(context, {\n    id\n  }) {\n    return axios.get(`${API_BASE_URL}/api/orders/${id}`, {\n      params: {\n        userAccessKey: localStorage.getItem('userAccessKey')\n      }\n    }).then(response => {\n      context.commit('updateOrderInfo', response.data);\n    }).catch(error => {\n      if (error.response.status === 500) {\n        context.commit('updateOrderError', error.response.data.error);\n        context.commit('updateOrderErrorMessage', error.response.data.error.message);\n        context.commit('updateOpen', true);\n      } else if (error.response.status === 400) {\n        throw error;\n      }\n    });\n  },\n  loadPaymentTypes(context, {\n    deliveryTypeId\n  }) {\n    return axios.get(`${API_BASE_URL}/api/payments`, {\n      params: {\n        deliveryTypeId\n      }\n    }).then(response => {\n      context.commit('updatePaymentTypes', response.data);\n    });\n  },\n  loadDeliveryTypes(context) {\n    return axios.get(`${API_BASE_URL}/api/deliveries`).then(response => {\n      context.commit('updateDeliveryTypes', response.data);\n    });\n  },\n  closeModal(context) {\n    context.commit('updateOpen', false);\n  }\n};\nconst mutations = {\n  updateOrderData(state, orderData) {\n    state.orderData = orderData;\n  },\n  updateOrderInfo(state, orderInfo) {\n    state.orderInfo = orderInfo;\n  },\n  updateDeliveryTypes(state, deliveryTypes) {\n    state.deliveryTypes = deliveryTypes;\n  },\n  updatePaymentTypes(state, paymentTypes) {\n    state.paymentTypes = paymentTypes;\n  },\n  updateOrderSendingFailed(state, orderSendingFailed) {\n    state.orderSendingFailed = orderSendingFailed;\n  },\n  updateOpen(state, open) {\n    state.open = open;\n  },\n  updateOrderError(state, orderError) {\n    state.orderError = orderError;\n  },\n  updateOrderErrorMessage(state, orderErrorMessage) {\n    state.orderErrorMessage = orderErrorMessage;\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n};","map":{"version":3,"names":["router","axios","API_BASE_URL","state","orderData","orderInfo","orderSendingFailed","deliveryTypes","paymentTypes","open","orderError","orderErrorMessage","getters","actions","loadOrderData","context","name","address","phone","email","deliveryTypeId","paymentTypeId","comment","commit","post","params","userAccessKey","localStorage","getItem","then","response","data","push","id","catch","error","status","message","request","loadOrderInfo","get","loadPaymentTypes","loadDeliveryTypes","closeModal","mutations","updateOrderData","updateOrderInfo","updateDeliveryTypes","updatePaymentTypes","updateOrderSendingFailed","updateOpen","updateOrderError","updateOrderErrorMessage","namespaced"],"sources":["/Users/elenasoshina/Desktop/Skillbox_Moire_shop/Skillbox_Moire/src/store/modules/order.js"],"sourcesContent":["/* eslint-disable */\nimport router from '@/router';\nimport axios from 'axios';\nimport { API_BASE_URL } from '@/config';\n\nconst state = () => ({\n  orderData: null,\n  orderInfo: null,\n\n  orderSendingFailed: false,\n\n  deliveryTypes: [],\n  paymentTypes: [],\n\n  open: false,\n  orderError: {},\n  orderErrorMessage: '',\n});\n\nconst getters = {};\n\nconst actions = {\n  loadOrderData(context, {\n    name, address, phone, email, deliveryTypeId, paymentTypeId, comment,\n  }) {\n    context.commit('updateOrderSendingFailed', false);\n    context.commit('updateOpen', false);\n    return axios\n      .post(`${API_BASE_URL}/api/orders`,\n        {\n          name,\n          address,\n          phone,\n          email,\n          deliveryTypeId,\n          paymentTypeId,\n          comment,\n        },\n        {\n          params: {\n            userAccessKey: localStorage.getItem('userAccessKey'),\n          },\n        })\n      .then((response) => {\n        if (response.data) context.commit('updateOrderData', response.data);\n        this.commit('cart/resetCart', response.data);\n        router.push({ name: 'orderInfo', params: { id: response.data.id } });\n      })\n      .catch((error) => {\n        context.commit('updateOrderSendingFailed', true);\n        if (error.response.status === 500) {\n          context.commit('updateOrderError', error.response.data.error);\n          context.commit('updateOrderErrorMessage', error.response.data.error.message);\n        } else {\n          context.commit('updateOrderError', error.response.data.error.request);\n          context.commit('updateOrderErrorMessage', 'Проверьте правильность заполнения полей');\n        }\n        context.commit('updateOpen', true);\n      });\n  },\n  loadOrderInfo(context, { id }) {\n    return axios\n      .get(`${API_BASE_URL}/api/orders/${id}`, {\n        params: {\n          userAccessKey: localStorage.getItem('userAccessKey'),\n        },\n      })\n      .then((response) => {\n        context.commit('updateOrderInfo', response.data);\n      })\n      .catch((error) => {\n        if (error.response.status === 500) {\n          context.commit('updateOrderError', error.response.data.error);\n          context.commit('updateOrderErrorMessage', error.response.data.error.message);\n          context.commit('updateOpen', true);\n        } else if (error.response.status === 400) {\n          throw error;\n        }\n      });\n  },\n  loadPaymentTypes(context, { deliveryTypeId }) {\n    return axios\n      .get(`${API_BASE_URL}/api/payments`, {\n        params: {\n          deliveryTypeId,\n        },\n      })\n      .then((response) => {\n        context.commit('updatePaymentTypes', response.data);\n      });\n  },\n  loadDeliveryTypes(context) {\n    return axios.get(`${API_BASE_URL}/api/deliveries`).then((response) => {\n      context.commit('updateDeliveryTypes', response.data);\n    });\n  },\n  closeModal(context) {\n    context.commit('updateOpen', false);\n  },\n};\n\nconst mutations = {\n  updateOrderData(state, orderData) {\n    state.orderData = orderData;\n  },\n  updateOrderInfo(state, orderInfo) {\n    state.orderInfo = orderInfo;\n  },\n  updateDeliveryTypes(state, deliveryTypes) {\n    state.deliveryTypes = deliveryTypes;\n  },\n  updatePaymentTypes(state, paymentTypes) {\n    state.paymentTypes = paymentTypes;\n  },\n  updateOrderSendingFailed(state, orderSendingFailed) {\n    state.orderSendingFailed = orderSendingFailed;\n  },\n  updateOpen(state, open) {\n    state.open = open;\n  },\n  updateOrderError(state, orderError) {\n    state.orderError = orderError;\n  },\n  updateOrderErrorMessage(state, orderErrorMessage) {\n    state.orderErrorMessage = orderErrorMessage;\n  },\n};\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}